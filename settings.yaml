# ===============================================================================
#
# Purpose: General settings for a Dandere2x session
#
# ===============================================================================
#
# This program is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later
# version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
# You should have received a copy of the GNU General Public License along with
# this program. If not, see <http://www.gnu.org/licenses/>.
#
# ===============================================================================



# The options are written as:
#
# [Comments or quick guide if needed]
# [option]: [value]  # Info or possible values - [recomended / default value]



################################################################################################
##                                                                                            ##
## IF UNSURE DO NOT CHANGE THE DEFAULTS SETTINGS, SPECIALLY BLEED, TILE SIZE AND BLOCK SIZE   ##
##                                                                                            ##
## SEE https://github.com/Tremeschin/dandere2x-tremx/wiki/Dandere2x-settings FOR A FULL GUIDE ##
##                                                                                            ##
################################################################################################



basic:
  # I highly recommend upscaling this "yn_moving_480.mkv" sample for testing if everything is working before a big session
  input_file: samples/yn_moving_480.mkv

  # "auto" adds a "$UPSCALE_RATIO$x_$UPSCALER_TYPE$" prefix to the filename and sets the output to the same directory
  output_file: auto  # [auto]

  # auto sets the session name to the input video filename
  session_name: auto  # [auto]

  
block_matching:
  #    Maybe the trickiest part.. IT ALL DEPENDS ON THE SOURCE FILE!!
  #
  #  (numbers for a 720p source video) 
  # Generally speaking, lower block sizes (< 12) yields longer upscale and might be less precise..
  # Too big (> 40~) you'll be wasting too much Upscaler upscales on not necessary parts
  #
  # A number between 20 should be enough for every video and for lower res (480p), 15 might be doable
  # 
  # There can be issues setting this manually, take a 100x100 video with block_size=33, there will be
  # a pixel at the bottom right, three 33x1 blocks and three 1x33 blocks.
  #
  # Setting this to "auto" applies a algorithm to decide a good value based on the input resolution
  #
  # Auto does not prevent yet bad edge blocks, TODO
  block_size: auto

  # These are how agressive the block matching is, how "different" the blocks should be to get upscaled
  # lower values will catch more blocks; higher values less blocks, see suggested values down below
  # dark and bright are determined by the mean pixel value of every channel on a frame
  # and then apply a linear function to get the final threshold, 0=dark, 255=bright
  # This seems to make block matching better as darker frames not a lot of colors are moving
  #
  # Suggested values:
  #   
  #   [High quality] Almost none bad blocks but quite a few wrong matched and upscaled ones:
  #      Good for very subtle moving / gradient changes in the source file
  #      - dark_threshold: 0.0035
  #      - bright_threshold: 0.0045
  #
  #   [Medium quality] Minor bad blocks on either anime / IRL and few wrong matched and upscaled:
  #      Good for a general standpoint, though with slow transitions the blocks may be a bit noticeable
  #      - dark_threshold: 0.01
  #      - bright_threshold: 0.015
  #
  #   [Low quality] Treshold pretty high, only a small "big" change in the blocks will be processed
  #      Good for a slideshow / very static anime or potentially bad encoded videos?
  #      - dark_threshold: 0.025
  #      - bright_threshold: 0.027
  #
  dark_threshold: 0.01  # [0.01]
  bright_threshold: 0.015  # [0.015]

  # A "over-crop" of the blocks in the original source to reduce blockiness as Upscaler bleeds a bit on the residuals
  #  A quick guide on the values:
  #
  #   0: Fastest, visible blocks everywhere
  #
  #   1: Better for faster and high quality upscales, minor visible blocks
  #
  #   2: Best quality at cost of larger upscale times, almost no visible blockiness
  #
  #   3: Not much difference from 2, only if the upscaler is bleeding A LOT (Upscaler denoise_level=3), values should not be higher than this
  #
  # If using srmd-ncnn-vulkan upscaler, bleed=2 is highly recommended as it bleeds a lot
  bleed: 1  # [1]

  # Let's say a frame has too many blocks to be upscaled, it is more worth upscaling the whole frame for quality rather than upscaling the blocks
  # This number is given in a percentage level, 80 for example would upscale full frames that have X >= 80 % of blocks needing upscale
  # Proper math with an "auto" mode WIP
  upscale_full_frame_threshold: 80  # [80]


upscaler:
  #   Upscaler type a bit hard to explain here, they'll determine the arguments you're gonna use
  #   See each upscaler linked repository for the options they recommend / use
  #
  # fake:  WINDOWS + LINUX
  #     For testing the raw speed of Dandere2x Python implementation, standard upscaling
  # 
  # waifu2x-ncnn-vulkan:  WINDOWS + LINUX
  #     Uses nihui's waifu2x-ncnn-vulkan implementation
  #     We prefer this as it's the less troublesome and faster one, though you gotta have a Vulkan capable GPU
  #     https://github.com/nihui/waifu2x-ncnn-vulkan
  #
  # waifu2x-converter-cpp:  WINDOWS + LINUX
  #     Uses DeadSix27's waifu2x-converter-cpp implementation
  #     The most compatible one (probably)
  #     https://github.com/DeadSix27/waifu2x-converter-cpp
  #
  # w2x-caffe:  WINDOWS
  #     Not implemented yet
  #
  # srmd-ncnn-vulkan: WINDOWS + LINUX
  #     Uses nihui's srmd-ncnn-vulkan-ncnn-vulkan
  #     https://github.com/nihui/srmd-ncnn-vulkan-ncnn-vulkan
  #
  # realsr-ncnn-vulkan: WINDOWS + LINUX
  #     Uses nihui's realsr-ncnn-vulkan-ncnn-vulkan
  #     https://github.com/nihui/realsr-ncnn-vulkan-ncnn-vulkan
  #
  type: waifu2x-ncnn-vulkan  # fake, waifu2x-converter-cpp, waifu2x-ncnn-vulkan, srmd-ncnn-vulkan, realsr-ncnn-vulkan - [waifu2x-ncnn-vulkan]

  # The upscale ratio is totally dependent on the upscaler you're using
  #
  # All Waifu2x but Caffe only works with 2x upscaling
  # srmd-ncnn-vulkan ranges from 2-4
  # realsr-ncnn-vulkan only utilizes 4 (utilizing it forces upscale_ratio to 4 as it's the only option)
  upscale_ratio: 2  # [2]

  # How much denoise the Upscaler model will apply, generally speaking lower is sharper but less smooth
  # 
  # It all depends on the upscaler you're using
  # For Waifu2x, 2 is a good number
  # For srmd-ncnn-vulkan, I personally like the 5~ range
  denoise_level: 2  # [2]

  # The tile size affects total GPU VRAM usage, smaller values increases upscale time.
  # The ideal spot is somewhere in the 200 - 400 range, 200 uses about 1 GB VRAM
  # Some upscalers uses 0 to choose a auto value, consider this an option, check the upscaler repo
  tile_size: 200  # [200]

  # Upscaler model to use (tries to find in the folder where the upscale binary is?)
  # See your upscaler models
  # TODO: Set models to their absolute paths in the upscale folder?
  model: null  # [null uses the default as no argument passed?]

  # nihui's ncnn Vulkan implementations have this options, see the upscaler repo for more info
  # load processes : processing processes ; saving processes, nihui recommends 4:4:4 for many small images
  load:proc:save: "4:4:4"  # [4:4:4]

  # For waifu2x-converter-cpp the above option is this, "number of threads launching at the same time"
  # Setting to null doesn't uses it
  w2x_converter_cpp_jobs: null  # [null]

  # Linux + AMD GPU only!!
  # Use RADV_PERFTEST=aco when calling Upscaler subprocess, I get ~2x faster upscaling with Vulkan based upscalers
  # Should only work with a compatible Mesa driver, should not interfere if set to true on NVIDIA GPUs as they don't use Mesa
  linux_enable_mesa_aco_upscaler: true  # [true]


# Stats are a bit primitive as for now, though they work on a basic level
stats:
  # Show stats about completion and ETAs
  # Better be used with loglevel=1 on CLI interface
  show_stats: true  # [true]

  # Tell the average processing time of these last N frames
  average_last_N_frames: 120  # [120]


danger_zone:
  # Forces resume=False if true (deletes session folder before upscaling)
  force: false  # [false]


video:
  # How to get the video info like resolution, frame count and frame rate
  # Options are "ffmpeg" or "mediainfo"
  # ffmpeg is the safest (?), uses ffmpeg and ffprobe binaries
  get_video_info_method: ffmpeg  # [ffmpeg]

  # mediainfo before overrides these next options
  get_frame_count_method: null_copy  # Only option available right now
  get_frame_rate_method: ffprobe  # Only option available right now
  get_resolution_method: ffprobe  # Only option available right now
  

ffmpeg:
  # Here's some good filters you might try out

  # 1. Old deblocking, more "general"
  #     pp=hb/vb/dr/fq|32, deband=range=22:blur=false

  # 2. Nice deblocking on anime
  #     deband=range=8:blur=false, pp7=qp=2:mode=medium  

  # 3. Better for IRL videos:
  #     deband=range=8:blur=false, pp7=qp=2:mode=medium, unsharp
  #
  deblock_filter: deband=range=8:blur=false, pp7=qp=2:mode=medium  # [number 2.] 
  encode_codec: libx264  # [libx264] Haven't added support for other codecs, you probably can do this by hardcoding it

  # Settings for the x264 encoder on FFmpeg's libx264
  x264:
    # See https://trac.ffmpeg.org/wiki/Encode/H.264 for a guide
    preset: slow  # [slow]
    tune: animation  # [animation]
    crf: 18  # [18]


dandere2x_cpp:
  # Without mindisk, C++ will do everything it needs to do ASAP:
  # Generates all residuals, technically should be the fastest.
  # Upscaler upscales in random order so may take a while to get the first images going
  # Mindisk on, C++ waits until a certain residual doesn't exist on the disk
  mindisk: true  # [true]

  # Most of these options should be set to the default unless you're developing / testing
  # the raw block matching, preferably use all these options set to true?
  only_run_dandere2x_cpp: false  # [false]
  write_debug_video: false  # [false]
  show_debug_video_realtime: false  # [false]
  show_block_matching_stats: false  # [false], this is very verbose!!


# AVOID VAPOURSYNTH FOR NOW
# Apply vapoursynth scripts before / after the upscale
# Not tested on Windows, Linux seems to be working if you have the required stuff
# And you should be a power user if you're using this anyway, just have "vspipe" and "x264" in path and the script modules you're gonna use
# See demo scripts on how to set the input video
vapoursynth:
  enabled: false
  # To disable these filters set them to "null" or "none"
  pre: transpose  # name of filter within ./vpys/$NAME$, applied BEFORE ffmpeg noise and upscaled
  pos: transpose  # name of filter within ./vpys/$NAME$, applied AFTER everything


developer:
  # Write log to disk? 
  write_log: true  # [true]

  # Verbose of Dandere2x, ranges from 0 to 10
  #   Note: loglevel 0 doesn't mean no output, just not the essential ones and the setting up session logs
  #   10 is ULTRA SLOW and shows all the vectors we're substituting, avoid if only not for the fun or hard hard hard debugging
  # Use 1 if show_stats is true preferably
  loglevel: 1  # [1]

  # How much Current - N frames behind to delete the residuals or upscaled residuals
  safety_ruthless_residual_eliminator_range: 2  # [2]

  # Time Python waits for a file to exist
  wait_time_exists: 0.05  # [0.05]

  # Time Upscaler sleeps after upscaling everything or nothing from residuals input folder
  upscaler_wait_for_residuals: 0.1  # [0.1]


specific:
  colors_output: true  # Doesn't work yet


debug:
  enable_upscaler: true  # [true]
